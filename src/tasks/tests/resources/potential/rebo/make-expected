#!/usr/bin/env python3

from contextlib import contextmanager
from os.path import join
import numpy as np
import json
import tempfile
import sys
import shutil
import subprocess

def main():
    tempdir = tempfile.mkdtemp()
    try:
        _main(tempdir)
    finally:
        shutil.rmtree(tempdir)

def _main(temp):
    shutil.copyfile('lmp.in', join(temp, 'lmp.in'))
    data = subprocess.check_output(['python3', 'generate.py', sys.argv[1]])
    with open(join(temp, 'data.data'), 'wb') as f:
        f.write(data)
    out = subprocess.check_output(['lmp', '-i', 'lmp.in', '-var', 'input', 'data.data'], cwd=temp)
    out = out.decode('utf-8')
    print(out, file=sys.stderr)
    pe_line, = [line for line in out.splitlines() if 'PotEng' in line]
    assert len(pe_line.split()) == 3
    output_value = float(pe_line.split()[2])

    output_force = []
    with open(join(temp, 'dump.force')) as f:
        lines = iter(f)
        for line in lines:
            if 'ITEM: NUMBER OF ATOMS' in line:
                break

        parts = next(lines).split()
        assert len(parts) == 1
        n_atoms = int(parts[0])

        for line in lines:
            if 'ITEM: ATOMS id type fx fy fz' in line:
                break
        else:
            assert False, 'could not find beginning of data (did the dump format change?)'

        for expected_n, line in enumerate(take(n_atoms, lines), start=1):
            parts = line.split()
            assert len(parts) == 5
            assert expected_n == int(parts[0])
            output_force.append(tuple(map(float, parts[2:2+3])))

    output_grad = (-1.0 * np.array(output_force)).tolist()
    d = {
        'value': output_value,
        'grad': output_grad,
    }
    json.dump(d, sys.stdout)
    print()

def take(n, it):
    for _ in range(n):
        yield next(it)

if __name__ == '__main__':
    main()
